''' 
Untitled
By Saad Ahmad

start app: python3 -m flask run
start db: will do it by itself
'''

from flask import Flask, flash, redirect, render_template, request, session, url_for
from flask_session import Session
from passlib.apps import custom_app_context as pwd_context
from tempfile import gettempdir
import data.sql as sql
from data.time_ import current_time, format_for_sql
from data.forms import RegisterForm
from helpers import *

db = sql
users = db.execute("SELECT username, email from users")

# configure application
app = Flask(__name__)

# ensure responses aren't cached
if app.config["DEBUG"]:
    @app.after_request
    def after_request(response):
        response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
        response.headers["Expires"] = 0
        response.headers["Pragma"] = "no-cache"
        return response

# custom filter
#app.jinja_env.filters["usd"] = usd

# configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = gettempdir()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
app.config["SESSION_COOKIE_NAME"] = 'session_cookie_name'

Session(app)

# configure CS50 Library to use SQLite database
#db = SQL("sqlite:///finance.db")

@app.route("/")
@login_required
def index():
    
    classes = db.execute("SELECT class_id FROM enrollments WHERE user_id = :user_id", user_id=session["user_id"])
    user = db.execute("SELECT * FROM users WHERE user_id = :id", id=session["user_id"])
    
    return render_template("index.html", classes=classes)

@app.route("/account", methods=["GET", "POST"])
@login_required
def account():
    #TODO
    return render_template("account.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in."""

    # forget any user_id
    session.clear()

    # if user reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username")

        # ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password")

        # query database for username
        rows = db.execute("SELECT password_hash, user_id FROM users WHERE username = ?", request.form.get("username"))

        # ensure username exists and password is correct
        if rows is None or not pwd_context.verify(request.form.get("password"), rows[0]["hash"]):
            return apology("invalid username and/or password")

        # remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # redirect user to home page
        return redirect(url_for("index"))

    # else if user reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")

@app.route("/logout")
def logout():
    """Log user out."""

    # forget any user_id
    session.clear()

    # redirect user to login form
    return redirect(url_for("login"))

@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""
    
    # if user reached route via POST (as by submitting a form via POST)
    if request.method == "POST":
        
        # ensure a symbol was submited
        if not request.form.get("symbol"):
            return render_template("quote.html")
        
        # request stock information    
        stock = lookup(request.form.get("symbol"))
        
        if not stock:
            return apology("symbol not found")

        return render_template("quoted.html", symbol=stock["symbol"], name=stock["name"], price=stock["price"])
    
    # else if user reached route via GET (as by clicking a link or via redirect)  
    else:
        return render_template("quote.html")

@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user."""
    # POST recieves, while the other sends. Validation will occur by JS as much as possible, and the rest will offload here
    # implemeneted using wtf forms to have secure password coming over
    form = RegisterForm(request.form)
    
    # if user reached route via POST (as by submitting a form via POST)
    if request.method == "POST" and form.validate() and form.username.data not in users[0:]:

        db.execute("INSERT INTO users (username, password_hash, email, time_stamp, permission) VALUES (?, ?, ?, ?, 0)",
            (form.username.data,
            pwd_context.encrypt(form.password.data),
            form.password.data,
            format_for_sql(current_time())
            )
        )
        
        # login user automatically and remember session
        rows = db.execute("SELECT * FROM users WHERE username = :username", username=request.form.get("username"))
        session["user_id"] = rows[0]["id"]

        flash("Succesfully registered")
        # redirect to home page
        return redirect(url_for("index"))
        
    # else if user reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("register.html", form=form, users=users)


<!-- Create Calendar -->
    <div id="calendar" class="calendar shadow-sm p-1">
        <!-- Row 1: Month on left, today, back, and next on right -->
        <div id="row1" class="cal_row inline_row">
        <div id="left_portion" class="cal_row">
            <h1>{{month_year[0]}}, {{month_year[1]}}</h1>
        </div>
        <div id="right_portion" >
            <button class="cal_button today_button">
            &#60;
            </button>
            <button class="cal_button today_button">
            Today
            </button>
            <button class="cal_button today_button">
            &#62;
            </button>
        </div>
        </div>
        <!-- Row 2: calendar rows range from 4-6 per month, read from python 2-d array of the month -->
        <div id="row2">
        <table class="date_container">
            <thead>
            <tr class="cal_row">
                <th class="cal_cell">Sun</th>
                <th class="cal_cell">Mon</th>
                <th class="cal_cell">Tue</th>
                <th class="cal_cell">Wed</th>
                <th class="cal_cell">Thu</th>
                <th class="cal_cell">Fri</th>
                <th class="cal_cell">Sat</th>
            </tr>
            </thead>
            <tbody>
            <!-- make a row for every week-->
            {% for week in month_list %}             
                <tr class="cal_row">
                {% for day in week %}
                    {% if day == 0 %}
                    <td  class="cal_cell">
                    <span class="day" id="{{day}}">&nbsp;
                    </span>
                    </td>
                    {% else %}
                    <td class="cal_cell">

                    <div class="cell_row">
                        <div class="cell_column" style="background-color:#ffffff;">
                        <p style="text-align: right;" >  {{ day }}</p>
                        </div>
                    </div>

                    {% if day|string in rendered_days %}  
                    <div class="cell_row">
                        <div>              
                            <p class="event" id="{{day}}_hours"></p>
                        </div>
                    </div>
                    <div class="cell_row">
                        <div style="background-color:#ffffff;text-align: center;" id="{{day}}_notes">                                
                            <a onclick="populate_cal_div('{{month_year[0]}},{{day}},{{month_year[1]}}')">View Notes</a>
                        </div>
                    </div>
                    <script>
                        const hour_manager = document.getElementById("{{day}}_hours");
                        const detail_manager = document.getElementById("{{day}}_notes");
                        for (let index in schedules) {
                        if (schedules[index][2] == '{{month_year[0]}},{{day}},{{month_year[1]}}') {
                            if (schedules[index][4] == null) {
                            hour_manager.textContent = "\u00A0";
                            hour_manager.classList.remove("event");
                            detail_manager.innerHTML= '';
                            const blank_element = detail_manager.creatElement('p');
                            blank_element.textContent = "\u00A0";
                            detail_manager.appendChild(blank_element);
                            }
                            break;
                        }
                        }
                    </script>
                    {% else %}
                    <div class="cell_row">
                        <div style="background-color:#ffffff;text-align: center;">                                
                            <p>&nbsp</p>
                        </div>
                    </div>
                    <div class="cell_row">
                        <div style="background-color:#ffffff;text-align: center;">                                
                            <p>&nbsp</p>
                        </div>
                    </div>
                    {% endif %}
                    </td>
                    {% endif %}
                {% endfor %}
                </tr>
            {% endfor %}
            </tbody>
        </table>
        </div>
    </div>
    </div>